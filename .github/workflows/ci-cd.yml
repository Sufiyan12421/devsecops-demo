name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  IMAGE_NAME: ghcr.io/sufiyan12421/devsecops-demo

jobs:
  build-and-scan:
    name: Build, Scan, and Push Docker Image
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # 2️⃣ Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 3️⃣ Log in to GHCR
      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 4️⃣ Build the Docker image
      - name: Build Docker image
        id: build-image
        run: |
          docker build -t $IMAGE_NAME:latest .
          IMAGE_TAG=$(git rev-parse --short HEAD)
          docker tag $IMAGE_NAME:latest $IMAGE_NAME:$IMAGE_TAG
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_OUTPUT

      # 5️⃣ Set up Trivy
      - name: Setup Trivy
        uses: aquasecurity/trivy-action@master
        with:
          version: latest  # use 'latest' to avoid missing versions

      # 6️⃣ Scan Docker image
      - name: Scan Docker Image
        run: |
          docker images
          IMAGE_TAG=${{ steps.build-image.outputs.IMAGE_TAG }}
          trivy image --exit-code 1 --severity HIGH,CRITICAL $IMAGE_NAME:$IMAGE_TAG

      # 7️⃣ Push Docker image
      - name: Push Docker image
        run: |
          IMAGE_TAG=${{ steps.build-image.outputs.IMAGE_TAG }}
          docker push $IMAGE_NAME:latest
          docker push $IMAGE_NAME:$IMAGE_TAG

  deploy-to-k8s:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: build-and-scan
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set Kubeconfig
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
          kubeconfig: ${{ secrets.KUBECONFIG }}

      - name: Deploy to K8s
        run: |
          IMAGE_TAG=${{ needs.build-and-scan.outputs.IMAGE_TAG }}
          kubectl set image deployment/my-app my-app=$IMAGE_NAME:$IMAGE_TAG -n my-namespace
          kubectl rollout status deployment/my-app -n my-namespace
